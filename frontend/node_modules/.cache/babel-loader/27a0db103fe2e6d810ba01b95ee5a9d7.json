{"ast":null,"code":"const isValidEmail = email => {\n  return String(email).toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\n\nexport const validate = (group, name, value) => {\n  if (group === \"signup\") {\n    switch (name) {\n      case \"name\":\n        {\n          if (!value) return \"This field is required\";\n          return null;\n        }\n\n      case \"email\":\n        {\n          if (!value) return \"This field is required\";\n          if (!isValidEmail(value)) return \"Please enter valid email address\";\n          return null;\n        }\n\n      case \"password\":\n        {\n          if (!value) return \"This field is required\";\n          if (value.length < 4) return \"Password should be atleast 4 chars long\";\n          return null;\n        }\n\n      default:\n        return null;\n    }\n  } else if (group === \"login\") {\n    switch (name) {\n      case \"email\":\n        {\n          if (!value) return \"This field is required\";\n          if (!isValidEmail(value)) return \"Please enter valid email address\";\n          return null;\n        }\n\n      case \"password\":\n        {\n          if (!value) return \"This field is required\";\n          return null;\n        }\n\n      default:\n        return null;\n    }\n  } else if (group === \"task\") {\n    switch (name) {\n      case \"description\":\n        {\n          if (!value) return \"This field is required\";\n          if (value.length > 100) return \"Max. limit is 100 characters.\";\n          return null;\n        }\n\n      default:\n        return null;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst validateManyFields = (group, list) => {\n  const errors = [];\n\n  for (const field in list) {\n    const err = validate(group, field, list[field]);\n    if (err) errors.push({\n      field,\n      err\n    });\n  }\n\n  return errors;\n};\n\nexport default validateManyFields;","map":{"version":3,"names":["isValidEmail","email","String","toLowerCase","match","validate","group","name","value","length","validateManyFields","list","errors","field","err","push"],"sources":["C:/Users/harit/OneDrive/Desktop/MERN-task-manager-main/frontend/src/validations/index.js"],"sourcesContent":["const isValidEmail = (email) => {\n  return String(email)\n    .toLowerCase()\n    .match(\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n    );\n};\n\nexport const validate = (group, name, value) => {\n\n  if (group === \"signup\") {\n    switch (name) {\n      case \"name\": {\n        if (!value) return \"This field is required\";\n        return null;\n      }\n      case \"email\": {\n        if (!value) return \"This field is required\";\n        if (!isValidEmail(value)) return \"Please enter valid email address\";\n        return null;\n      }\n      case \"password\": {\n        if (!value) return \"This field is required\";\n        if (value.length < 4) return \"Password should be atleast 4 chars long\";\n        return null;\n      }\n      default: return null;\n    }\n  }\n\n  else if (group === \"login\") {\n    switch (name) {\n      case \"email\": {\n        if (!value) return \"This field is required\";\n        if (!isValidEmail(value)) return \"Please enter valid email address\";\n        return null;\n      }\n      case \"password\": {\n        if (!value) return \"This field is required\";\n        return null;\n      }\n      default: return null;\n    }\n  }\n  else if (group === \"task\") {\n    switch (name) {\n      case \"description\": {\n        if (!value) return \"This field is required\";\n        if (value.length > 100) return \"Max. limit is 100 characters.\";\n        return null;\n      }\n      default: return null;\n    }\n  }\n\n  else {\n    return null;\n  }\n\n}\n\n\nconst validateManyFields = (group, list) => {\n  const errors = [];\n  for (const field in list) {\n    const err = validate(group, field, list[field]);\n    if (err) errors.push({ field, err });\n  }\n  return errors;\n}\nexport default validateManyFields;"],"mappings":"AAAA,MAAMA,YAAY,GAAIC,KAAD,IAAW;EAC9B,OAAOC,MAAM,CAACD,KAAD,CAAN,CACJE,WADI,GAEJC,KAFI,CAGH,uJAHG,CAAP;AAKD,CAND;;AAQA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcC,KAAd,KAAwB;EAE9C,IAAIF,KAAK,KAAK,QAAd,EAAwB;IACtB,QAAQC,IAAR;MACE,KAAK,MAAL;QAAa;UACX,IAAI,CAACC,KAAL,EAAY,OAAO,wBAAP;UACZ,OAAO,IAAP;QACD;;MACD,KAAK,OAAL;QAAc;UACZ,IAAI,CAACA,KAAL,EAAY,OAAO,wBAAP;UACZ,IAAI,CAACR,YAAY,CAACQ,KAAD,CAAjB,EAA0B,OAAO,kCAAP;UAC1B,OAAO,IAAP;QACD;;MACD,KAAK,UAAL;QAAiB;UACf,IAAI,CAACA,KAAL,EAAY,OAAO,wBAAP;UACZ,IAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB,OAAO,yCAAP;UACtB,OAAO,IAAP;QACD;;MACD;QAAS,OAAO,IAAP;IAfX;EAiBD,CAlBD,MAoBK,IAAIH,KAAK,KAAK,OAAd,EAAuB;IAC1B,QAAQC,IAAR;MACE,KAAK,OAAL;QAAc;UACZ,IAAI,CAACC,KAAL,EAAY,OAAO,wBAAP;UACZ,IAAI,CAACR,YAAY,CAACQ,KAAD,CAAjB,EAA0B,OAAO,kCAAP;UAC1B,OAAO,IAAP;QACD;;MACD,KAAK,UAAL;QAAiB;UACf,IAAI,CAACA,KAAL,EAAY,OAAO,wBAAP;UACZ,OAAO,IAAP;QACD;;MACD;QAAS,OAAO,IAAP;IAVX;EAYD,CAbI,MAcA,IAAIF,KAAK,KAAK,MAAd,EAAsB;IACzB,QAAQC,IAAR;MACE,KAAK,aAAL;QAAoB;UAClB,IAAI,CAACC,KAAL,EAAY,OAAO,wBAAP;UACZ,IAAIA,KAAK,CAACC,MAAN,GAAe,GAAnB,EAAwB,OAAO,+BAAP;UACxB,OAAO,IAAP;QACD;;MACD;QAAS,OAAO,IAAP;IANX;EAQD,CATI,MAWA;IACH,OAAO,IAAP;EACD;AAEF,CAnDM;;AAsDP,MAAMC,kBAAkB,GAAG,CAACJ,KAAD,EAAQK,IAAR,KAAiB;EAC1C,MAAMC,MAAM,GAAG,EAAf;;EACA,KAAK,MAAMC,KAAX,IAAoBF,IAApB,EAA0B;IACxB,MAAMG,GAAG,GAAGT,QAAQ,CAACC,KAAD,EAAQO,KAAR,EAAeF,IAAI,CAACE,KAAD,CAAnB,CAApB;IACA,IAAIC,GAAJ,EAASF,MAAM,CAACG,IAAP,CAAY;MAAEF,KAAF;MAASC;IAAT,CAAZ;EACV;;EACD,OAAOF,MAAP;AACD,CAPD;;AAQA,eAAeF,kBAAf"},"metadata":{},"sourceType":"module"}